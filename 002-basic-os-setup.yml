---
####################################################
#
# Phase 2: Basic OS Setup

- name: Ensure Servers are booted and reachable
  hosts: hanas, s4hanas
  gather_facts: false
  become: false
  tasks:
  - name: Wait for SSH to come up
    wait_for:
      host: "{{ ansible_host }}"
      port: 22
      delay: 90
      state: started
      timeout: "{% if boot_timeout is defined %}{{ boot_timeout }}{% else %}2000{% endif %}"
      ## did not work: "{{ boot_timeout | default 480 }}"
      # timeout: 480 # for VM Only
    delegate_to: localhost

- name: Phase 2 - basic OS Setup
  hosts: hanas, s4hanas
  become: true

  # Default variables for the playbooks can be set here
  # and can be overwritten in the template file
  vars:
    reg_activation_key: "{{ sap_rhsm_activationkey }}"
    reg_organization_id: "{{ sap_rhsm_org_id }}"
    reg_osrelease: 8.4
    repositories:
      - rhel-8-for-x86_64-baseos-e4s-rpms
      - rhel-8-for-x86_64-appstream-e4s-rpms
      - rhel-8-for-x86_64-sap-solutions-e4s-rpms
      - rhel-8-for-x86_64-sap-netweaver-e4s-rpms
      - rhel-8-for-x86_64-highavailability-e4s-rpms

  tasks:
    - name: Ensure Correct subscription and repositories
      include_role:
        name: mk-ansible-roles.subscribe_rhn

    - name: get storage pool setup from server definition
      set_fact:
        storage_pools: "{{ ( vmware_machines + oneview_machines ) | selectattr('name', 'equalto', inventory_hostname) | sum(attribute='storage_pools', start=[]) }}"

    - name: debug storage_pools
      debug:
        msg: “{{ storage_pools }}"

    - name: Ensure storage is configured correctly
      include_role:
        name: redhat.rhel_system_roles.storage

    - name: NFS client is installed
      dnf:
        name:
          - nfs-utils
        state: present

    - name: Ensure Mountpoint exists
      file:
        path: "{{ nfs_software_archive_dir }}"
        state: directory
        mode: '0755'

    - name: Ensure NFS Server with SAP Software is mounted
      ansible.posix.mount:
        src: "{{ nfs_software_archive_srv }}"
        path: "{{ nfs_software_archive_dir }}"
        opts: rw,sync,hard,noatime
        fstype: nfs
        state: mounted

    # Debug by Markus S:
    - name: Read all mounts
      ansible.builtin.shell:
        mount | grep nfs
      register: mount_output

    - name: List all mounts
      ansible.builtin.debug:
        var: mount_output.stdout_lines

    # ensure poor mans name resolution => /etc/hosts
    - name: ensure /etc/hosts set up correctly
      ansible.builtin.lineinfile:
        path: /etc/hosts
        search_string: "{{ item }}"
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}  {{ item }}.{{ dns_domainname }} {{ item }}"
        owner: root
        group: root
        mode: '0644'
        create: true
      loop: "{{ (groups['hanas'],  groups['s4hanas'] ) | flatten }}"
      when: item != inventory_hostname 
