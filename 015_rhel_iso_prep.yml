- hosts: oneview_targets
  
  # If we choose different iso file names we could deploy multiple nodes at the same time
  # we would still need serial: 1 as we wokr on the same filesystem to manipulate the iso-image.
  serial: 1
  gather_facts: no
  become: true

  tasks:

    - name: Install packages needed (genisoimage, mkisofs, syslinux, isomd5sum)
      ansible.builtin.yum:
        name: 
          - genisoimage
          - mkisofs
          - syslinux
          - isomd5sum
        state: latest
      delegate_to: bastion_host
      run_once: true
      
    - name: Mount installation ISO read-only
      ansible.builtin.mount:
        path: "{{ mnt_dir }}"
        src:  "{{ original_iso_full_path }}"
        fstype: "iso9660"
        opts: loop,ro
        state: mounted
      become: true
      delegate_to: bastion_host
 
    - name: Get RHEL version out of original iso file
      ansible.builtin.shell: "blkid {{ original_iso_full_path }}"
      register: blkid_output
      delegate_to: bastion_host
 
    - name: Set variables according to detected RHEL
      ansible.builtin.set_fact:
        rhel_label: "{{ blkid_output.stdout | regex_search('RHEL-(.*)-x86_64') }}"
        rhel_version: "{{ blkid_output.stdout | regex_search('.[.].') }}"
      delegate_to: bastion_host
 
    - name: Print RHEL version and iso label
      ansible.builtin.debug:
        msg: "Automatically detected RHEL version is {{ rhel_version }}, iso file label is {{ rhel_label }}"
      delegate_to: bastion_host
 
    - name: Create a working directory if it does not exist
      ansible.builtin.file:
        path: "{{ wrk_dir }}"
        state: directory
      delegate_to: bastion_host
 
    - name: Copy ISO content to working directory
      ansible.builtin.copy:
        src: "{{ mnt_dir }}/"
        dest: "{{ wrk_dir }}/"
        remote_src: true
      become: true 
      delegate_to: bastion_host
 
    - name: Unmount original ISO 
      ansible.builtin.mount:
        path: "{{ mnt_dir }}"
        state: unmounted
      become: true
      delegate_to: bastion_host
 
    - name: debug rt_pass
      debug:
        msg: "rt_pass: {{ rt_pass}}"
 
    - name: Create ks.cfg file from template
      ansible.builtin.template:
        src: ks.cfg.j2
        dest: "{{ wrk_dir }}/ks.cfg"
      become: true
      delegate_to: bastion_host
 
## added networking config into jinja template
#    - name: Insert ip address and netmask if network is static
#      ansible.builtin.lineinfile:
#        path: "{{ wrk_dir }}/ks.cfg"
#        regexp: "^network --bootproto=static"
#        line: "network --bootproto=static --ip={{ machine_ip }} --netmask={{ machine_netmask }}"
#        backrefs: yes
#      when: network_bootproto == "static"
#      delegate_to: bastion_host
 
#    - name: Insert hostname if defined
#      ansible.builtin.lineinfile:
#        path: "{{ wrk_dir }}/ks.cfg"
#        regexp: "^(network --bootproto=(.*)?)"
#        line: \g<1> --hostname={{ machine_hostname }}
#        backrefs: yes
#      when: machine_hostname is defined
#      delegate_to: bastion_host
 
#    - name: Insert device for network configuration if defined
#      ansible.builtin.lineinfile:
#        path: "{{ wrk_dir }}/ks.cfg"
#        regexp: "^(network --bootproto=(.*)?)"
#        line: \g<1> --device={{ net_device }}
#        backrefs: yes
#      when: net_device is defined
#      delegate_to: bastion_host
 
#    - name: Insert DNS if defined
#      ansible.builtin.lineinfile:
#        path: "{{ wrk_dir }}/ks.cfg"
#        regexp: "^(network --bootproto=(.*)?)"
#        line: \g<1> --nameserver={{ dns_server }}
#        backrefs: yes
#      when: (network_bootproto == "static") and (dns_server is defined)
#      delegate_to: bastion_host
 
#    - name: Insert gateway if defined
#      ansible.builtin.lineinfile:
#        path: "{{ wrk_dir }}/ks.cfg"
#        regexp: "^(network --bootproto=(.*)?)"
#        line: \g<1> --gateway={{ net_gateway }}
#        backrefs: yes
#      when: (network_bootproto == "static") and (net_gateway is defined)
#      delegate_to: bastion_host
 
    - name: Insert additional user and password if defined
      ansible.builtin.lineinfile:
        path: "{{ wrk_dir }}/ks.cfg"
        line: "user --name={{ additional_user_name }} --password={{ additional_user_pass | password_hash('sha512') }} --iscrypted"
        insertbefore: '%packages'
      when: (additional_user_name is defined) and (additional_user_pass is defined)
      delegate_to: bastion_host
 
    - name: Include the additional user into an non-default group
      ansible.builtin.lineinfile:
        path: "{{ wrk_dir }}/ks.cfg"
        regexp: "^(user --name=(.*)?)"
        line: \g<1> --groups={{ additional_user_group }}
        backrefs: yes
      when: (additional_user_name is defined) and (additional_user_pass is defined) and (additional_user_group is defined)
      delegate_to: bastion_host
 
    - name: Subscribe the system with subcription-manager in post script
      ansible.builtin.blockinfile:
        path: "{{ wrk_dir }}/ks.cfg"
        insertbefore: '%packages'
        block: |
          %post --log=/root/registration_results.out
          subscription-manager register --auto-attach --username={{ rhn_user }} --password={{ rhn_pass }}
          %end
      when: (rhn_user is defined) and (rhn_pass is defined)
      delegate_to: bastion_host
 
    - name: Create isolinux.cfg file from template
      ansible.builtin.template:
        src: isolinux.cfg.j2
        dest: "{{ wrk_dir }}/isolinux/isolinux.cfg"
      become: true
      delegate_to: bastion_host
 
    - name: Create grub.cfg file from template
      ansible.builtin.template:
        src: grub.cfg.j2
        dest: "{{ wrk_dir }}/EFI/BOOT/grub.cfg"
      become: true
      delegate_to: bastion_host
 
    - name: Create customized RHEL iso image
      ansible.builtin.shell: 'mkisofs -o {{ cust_iso }} -b isolinux/isolinux.bin -J -R -l -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot --joliet-long -graft-points -V "{{ rhel_label }}" {{ wrk_dir }}'
      become: true
      delegate_to: bastion_host
 
    - name: Make it UEFI bootable
      ansible.builtin.shell: "isohybrid --uefi {{ cust_iso }}"
      become: true
      delegate_to: bastion_host
 
    - name: Implant md5 to ISO file
      ansible.builtin.shell: "implantisomd5 {{ cust_iso }}"
      become: true
      delegate_to: bastion_host
 
    - name: Remove workingdir with ISO content
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
         - "{{ wrk_dir }}"
         - "{{ mnt_dir }}"
      delegate_to: bastion_host
      when: ansible_verbosity <= 2

 # avoiding noise of continous install/deinstall and speeding up deployment process
 #   - name: Remove used packages (genisoimage, mkisofs, syslinux, isomd5sum)
 #     ansible.builtin.yum:
 #       name: 
 #         - genisoimage#
 #         - mkisofs
 #         - syslinux
 #         - isomd5sum
 #       state: absent
 #     delegate_to: bastion_host
